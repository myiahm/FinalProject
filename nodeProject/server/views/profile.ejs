<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <script src=”//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js”></script>
    <link rel=”stylesheet” href=”http://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css”>
    <script src=”//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js”></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>


    <style type="text/css">
        * {
            border: deepskyblue solid 2px;
        }

        text {
            font-family: Helvetica, Arial, sans-serif;
            font-size: 15px;
            pointer-events: none;
        }

        #chart {
            position: absolute;
            width: 500px;
            height: 500px;
            top: 0;
            left: 0;
        }

        #question {

            position: absolute;
            width: 400px;
            height: 500px;
            top: 0;
            left: 520px;
        }

        #question h1 {
            color: aliceblue;

            font-size: 40px;
            font-weight: bold;
            font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
            position: absolute;
            padding: 0;
            margin: 0;
            top: 50%;
            -webkit-transform: translate(0, -50%);
            transform: translate(0, -50%);
        }

        body {
            background-color: grey;
        }

    </style>

</head>
<body>
<div id="namearea">
    <div></div>

</div>
<!--<div>-->
<!--<form action="/'profile/:name'/" method="post">-->
<!--<label for="name">Enter name: </label>-->
<!--<input id="name" type="text" name="field">-->
<!--<input type="submit" value="OK">-->
<!--</form>-->
<!--<input type="text" id="name">-->
<!--<button type="submit" onclick="people">submit</button>-->
<!--<h1 id="namespace"></h1>-->


<!--&lt;!&ndash;<h1>nameI</h1>&ndash;&gt;-->
<!--</div>-->
<div style="margin-top: 15%" id="chart"></div>
<div style="margin-top: 15%" id="question"><h1></h1></div>


<script src="namespinner.js"></script>
<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script type="text/javascript" charset="utf-8">
    var nameI = document.getElementById(name);
    var padding = {top: 20, right: 40, bottom: 0, left: 0},
        w = 500 - padding.left - padding.right,
        h = 500 - padding.top - padding.bottom,
        r = Math.min(w, h) / 2,
        rotation = 0,
        oldrotation = 0,
        picked = 100000,
        oldpick = [],
        color = d3.scale.category20();//category20c()
    //randomNumbers = getRandomNumbers();
    //http://osric.com/bingo-card-generator/?title=HTML+and+CSS+BINGO!&words=padding%2Cfont-family%2Ccolor%2Cfont-weight%2Cfont-size%2Cbackground-color%2Cnesting%2Cbottom%2Csans-serif%2Cperiod%2Cpound+sign%2C%EF%B9%A4body%EF%B9%A5%2C%EF%B9%A4ul%EF%B9%A5%2C%EF%B9%A4h1%EF%B9%A5%2Cmargin%2C%3C++%3E%2C{+}%2C%EF%B9%A4p%EF%B9%A5%2C%EF%B9%A4!DOCTYPE+html%EF%B9%A5%2C%EF%B9%A4head%EF%B9%A5%2Ccolon%2C%EF%B9%A4style%EF%B9%A5%2C.html%2CHTML%2CCSS%2CJavaScript%2Cborder&freespace=true&freespaceValue=Web+Design+Master&freespaceRandom=false&width=5&height=5&number=35#results
    var data = []

    var people = []

    class SliceEntry {
        constructor(label, question) {

            this.label = label
            this.question = question
            this.value = 1

        }


    }


    function input() {
        var count = parseInt(prompt("How many people?: "))
        if (count > 0) {
            for (i = 0; i < count; i++) {
                var names = prompt("Enter name: ")
                person = {
                    name: names

                }
                // people.push(names)
                people.push(person)
                // console.log(names)
                // console.log(people)
            }
            peoplelist = "";
            for (i = 0; i < people.length; i++) {
                console.log(people[i]);
                peoplelist += (people[i].name + " * " + people[i].jobname + " <br/>");


            }


        }


        var lableinfo = parseInt(prompt("How many problems do you have? "))
        if (lableinfo > 0) {
            for (i = 0; i < lableinfo; i++) {
                var newslice = prompt("Problem : ")
                var newdirections = prompt("Directions: ")
                var entry = new SliceEntry(newslice, newdirections)
                data.push(entry)
                console.log(newslice)
                console.log(newdirections)
                console.log(entry)
            }


        }
    }

    function printToPage() {
        console.log("Start of people list")
        console.log(peoplelist);
        console.log("End of people list")
        document.getElementById("namearea").innerHTML = peoplelist;

    }

    input();

    var svg = d3.select('#chart')
        .append("svg")
        .data([data])
        .attr("width", w + padding.left + padding.right)
        .attr("height", h + padding.top + padding.bottom);
    var container = svg.append("g")
        .attr("class", "chartholder")
        .attr("transform", "translate(" + (w / 2 + padding.left) + "," + (h / 2 + padding.top) + ")");
    var vis = container
        .append("g");

    var pie = d3.layout.pie().sort(null).value(function (d) {
        return 1;
    });
    // declare an arc generator function
    var arc = d3.svg.arc().outerRadius(r);
    // select paths, use arc generator to draw
    var arcs = vis.selectAll("g.slice")
        .data(pie)
        .enter()
        .append("g")
        .attr("class", "slice");

    arcs.append("path")
        .attr("fill", function (d, i) {
            return color(i);
        })
        .attr("d", function (d) {
            return arc(d);
        });
    // add the text
    arcs.append("text").attr("transform", function (d) {
        d.innerRadius = 0;
        d.outerRadius = r;
        d.angle = (d.startAngle + d.endAngle) / 2;
        return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")translate(" + (d.outerRadius - 10) + ")";
    })
        .attr("text-anchor", "end")
        .text(function (d, i) {
            return data[i].label;
        });
    container.on("click", spin);

    var spincount = 0;

    function spin(d) {
        printToPage();

        container.on("click", null);
        //all slices have been seen, all done
        console.log("OldPick: " + oldpick.length, "Data length: " + data.length);
        if (oldpick.length == data.length) {
            console.log("done");
            printToPage();
            container.on("click", null);
            return;
        }
        var ps = 360 / data.length,
            pieslice = Math.round(1440 / data.length),
            rng = Math.floor((Math.random() * 1440) + 360);

        rotation = (Math.round(rng / ps) * ps);

        picked = Math.round(data.length - (rotation % 360) / ps);
        picked = picked >= data.length ? (picked % data.length) : picked;
        if (oldpick.indexOf(picked) !== -1) {
            d3.select(this).call(spin);
            return;
        } else {
            oldpick.push(picked);
        }
        rotation += 90 - Math.round(ps / 2);
        vis.transition()
            .duration(3000)
            .attrTween("transform", rotTween)
            .each("end", function () {
                //mark question as seen
                d3.select(".slice:nth-child(" + (picked + 1) + ") path")
                    .attr("fill", "#111");
                //populate question
                d3.select("#question h1")
                    .text(data[picked].question);
                people[spincount].jobname = data[picked].question;
                console.log("this is spin count"+people[spincount]);
                oldrotation = rotation;
                spincount++;
                container.on("click", spin);
            });
    }

    //make arrow
    svg.append("g")
        .attr("transform", "translate(" + (w + padding.left + padding.right) + "," + ((h / 2) + padding.top) + ")")
        .append("path")
        .attr("d", "M-" + (r * .15) + ",0L0," + (r * .05) + "L0,-" + (r * .05) + "Z")
        .style({"fill": "black"});
    //draw spin circle
    container.append("circle")
        .attr("cx", 0)
        .attr("cy", 0)
        .attr("r", 60)
        .style({"fill": "white", "cursor": "pointer"});
    //spin text
    container.append("text")
        .attr("x", 0)
        .attr("y", 15)
        .attr("text-anchor", "middle")
        .text("SPIN")
        .style({"font-weight": "bold", "font-size": "30px"});


    function rotTween(to) {
        var i = d3.interpolate(oldrotation % 360, rotation);
        return function (t) {
            return "rotate(" + i(t) + ")";
        };
    }


    function getRandomNumbers() {
        var array = new Uint16Array(1000);
        var scale = d3.scale.linear().range([360, 1440]).domain([0, 100000]);
        if (window.hasOwnProperty("crypto") && typeof window.crypto.getRandomValues === "function") {
            window.crypto.getRandomValues(array);
            console.log("works");
        } else {
            //no support for crypto, get crappy random numbers
            for (var i = 0; i < 1000; i++) {
                array[i] = Math.floor(Math.random() * 100000) + 1;
            }
        }
        return array;
    }
</script>
</body>
</html>